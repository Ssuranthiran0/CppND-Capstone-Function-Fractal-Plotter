NOTE: using std::vector<float> instead of std::complex and std::pair<float> because i coded the plotter to work with these, and I am more familiar with std::vector
I do not want to attempt to use something that I dont fully know/understand


MANDLEBROT SET

The mandlebrot set is a recursive set defined as  z -> z^2 + C, where z is a complex number a + bi (where i^2 = -1), and C is a complex number.
Z starts at 0 and this recursive function is repeated for the max_iterations and for every complex number C (in the domain). If C diverges to infinity 
(or some insane value), then it is not a part of the set. If C stays near 0, it is a part of the set, and is added to the point array. If z ever goes outside
a circle of radius 2, it is not a part of the set. (a^2+b^2 > 4), as it will continue to increase (lim n->infinity r^n = infinity (r>1) but for complex).
Therefore, for a set amount of iterations (more = more accuracy), if z ever goes out of the circle, C is not a part of the set.
C = complex
z = 0
repeat 4:
    z = z^2 + C
    if(a^2+b^2>2): // out of circle
        return false // not in set
return true // if it finished all iterations in the circle, it is in the set


Info from: https://fractaltodesktop.com/mandelbrot-set-basics/index.html
z^2 = (a+bi)^2 = a^2 + (2ab)i + b^2 * i^2 = (a^2-b^2) + (2ab)i. 




JULIA SET

The julia set is very similar to the mandlebrot set, with a similar equation z -> z^2 + C, where z is a complex number a + bi, and C is a complex number.
In the julia set however, C is a constant. This equation is applied to all points. If each points, after a set amount of iterations of f(z), leaves the escape radius,
a set value chosen in reference to C, that point is not a part of the Julia set, and will not be plotted. 
Whearas the mandelbrot set takes z=0 to be the startin value and tests it for every starting value of C, the julia set takes c as a constant,
and tests it for every starting value of z.
Info from: https://en.wikipedia.org/wiki/Julia_set



SIERPINSKI TRIANGLE

The sierpinski triangle is a fractal that can be formed in many ways. One way is a method of removing triangles. Start with an equilateral triangle,
then subdivide it evenly into 4 triangle, like this: (i apologise if the triangles are not exactly congruent(doing this by hand))
     /\                 /\
    /  \               /  \
   /    \             /____\
  /      \    ->     /\    /\
 /        \         /  \  /  \
/__________\       /____\/____\
Remove the center triangle and recursively repeat this process for the 3 outer triangles, for as many steps as necessary.
Another way to do this is through the chaos game. Make three points (for the three corners of the triangle). Choose any random point,
inside or outside the triangle, pick any of the existing points. Then draw the midpoint of these two points, and then continue this process from the midpoint,
drawing the midpoint of the current point (old midpoint) and a random point. As this process continues, it forms the sierpinski triangle.
Info from: https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle
Chaos Game: https://en.wikipedia.org/wiki/Chaos_game
Chaos Game Demonstration(not me): https://www.youtube.com/watch?v=Fgu5-3ihVVI
Chaos Game Explanation(numberphile): https://www.youtube.com/watch?v=kbKtFN71Lfs




KOCH SNOWFLAKE
https://en.wikipedia.org/wiki/Koch_Snowflake
kinda boring to explain so

BARNSLEY FERN

The barnsley ferm is a fractal that looks a lot like a fern. The method of creating it is very similar to the chaos game for sierpinski triangles.
You have two triangles, and perform a set of transformations based on random chance to generate the fern. (loop for max_iterations). There is
a 10% chance for it to add a new point (0, 1.16 * prev_y),  a 76% chance to add a new point (0.85 * prev_x + 0.04 * prev_y, -0.04 * prev_x + 0.85 * prev_y + 1.6)
7%: (0.2prevx - 0.26prevy, 0.23prevx + 0.22prevy + 1.6)
and a 7% chance of (-0.15 * x + 0.22 * y, 0.26 * x + 0.24 * y + 0.44)
SOURCE: https://en.wikipedia.org/wiki/Barnsley_fern